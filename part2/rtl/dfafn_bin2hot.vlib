/*****************************************************************************

 (c) Copyright 2005, Cadence Design Systems, Inc.                       
 All rights reserved.                                                   

 This software is the proprietary information of Cadence Design         
 Systems, Inc. and may not be copied or reproduced in whole or in part  
 onto any medium without Cadence's express prior written consent.       

 This software is provided to the end user solely for his/her use.  No  
 warranties are expressed or implied herein including those as to       
 merchantability and fitness for a particular purpose.  In no event     
 shall Cadence be held liable for loss of profit, business              
 interruption, data, loss of information, or any other pecuniary loss   
 including but not limited to special, incidental, consequential, or    
 other damages.                                                         

  Original Author: Paul Hylander

Michael Avery
Version 2.0  - 13 February 2015 
Changes to remove lint warnings in Jasper and produce assetion failures
in the event of the constraints being incorrectly defined.

******************************************************************************/


`include "dfafn_lib.h"
/******************************************************************************
  dfafn_bin2hot converts a binary input value to a one-hot vector on the
  output.  "WIDTH" parameter determines the width of the output and it is
  assumed that the input value is of width sufficient to represent all possible
  one-hot bit positions.  For example, given WIDTH=10, value would have width
  of 4.
******************************************************************************/
module dfafn_bin2hot
#(
parameter WIDTH=3
)
(
    input [`dfafn_range2size(WIDTH)-1:0] value,
    output  reg [WIDTH-1:0] result
);

`ifdef ABV_PARAM_CHECK
// psl assert_param_check1: assert WIDTH>0;
`endif

localparam RWIDTH=`dfafn_range2size(WIDTH);

integer i;

always @* begin
    result =  {WIDTH{1'b0}};
    for(i=0;i<WIDTH;i=i+1)
	if (i[RWIDTH-1:0]==value) result[i]=1'b1;
end

endmodule

