/*****************************************************************************

 (c) Copyright 2005, Cadence Design Systems, Inc.                       
 All rights reserved.                                                   

 This software is the proprietary information of Cadence Design         
 Systems, Inc. and may not be copied or reproduced in whole or in part  
 onto any medium without Cadence's express prior written consent.       

 This software is provided to the end user solely for his/her use.  No  
 warranties are expressed or implied herein including those as to       
 merchantability and fitness for a particular purpose.  In no event     
 shall Cadence be held liable for loss of profit, business              
 interruption, data, loss of information, or any other pecuniary loss   
 including but not limited to special, incidental, consequential, or    
 other damages.                                                         

  Original Author: Paul Hylander

Michael Avery
Version 2.0  - 13 February 2015 
Changes to remove lint warnings in Jasper and produce assetion failures
in the event of the constraints being incorrectly defined.

******************************************************************************/


`include "dfafn_lib.h"
/******************************************************************************
  dfafn_prio_search returns on the output "result" a zero-one-hot vector
  such that the single bit that is set (if any) corresponds to the highest
  priority bit in the input vector "value".  The highest priority bit
  corresponds to the one-hot input vector "prio_index".  Assuming the
  highest priority bit in prio_index is bit N, then for DIR="SEARCH_LEFT"
  (default), the next next-highest priority corresponds to bit-position N+1
  (i.e. the bit position of next highest priority shifts to the left).
  For DIR="SEARCH_RIGHT", the next next-highest priority corresponds to
  bit-position N-1 (i.e. the bit position of next highest priority shifts
  to the right).
  
  If the input vector "value" is all zeros than the corresponding
  output "result" will be all zeros.

  Note that this function uses a tree algorithm to calculate the result.
  This will often provide a better synthesis result (less area and faster)
  than alternative algorithms, however it will have lesser benefit for
  simulation or formal verification.
******************************************************************************/
module dfafn_prio_search
#(parameter WIDTH=2, parameter DIR="SEARCH_LEFT")
(
	input  [WIDTH-1:0] value,
	input  [WIDTH-1:0] prio_index,
	output reg [WIDTH-1:0] result
);

`ifdef ABV_PARAM_CHECK
// psl assert_param_check1: assert WIDTH>0;
// psl assert_param_check2: assert DIR=="SEARCH_LEFT" || DIR=="SEARCH_RIGHT";
`endif

localparam RWIDTH=`dfafn_range2size(WIDTH);
localparam WIDTH2 = `dfafn_pow2(RWIDTH);

reg [WIDTH-1:0] rot;

reg [WIDTH-1:0] index_array[WIDTH2-1:0];
reg [WIDTH2-1:0] one_array;

integer i,j;

always @* begin
	rot = prio_index;
	for(i=0;i<WIDTH2;i=i+1) begin
		one_array[i] = (i<WIDTH && |(value & rot));
		index_array[i] = rot;

		if (DIR=="SEARCH_LEFT") rot = {rot[WIDTH-2:0], rot[WIDTH-1]};
		else rot = {rot[0], rot[WIDTH-1:1]};
	end
	for(i=1;i<=RWIDTH;i=i+1)
		// within each level we must select between the left an right
		// side of a pair bits and keep the position of the selected value
		for(j=0;j<`dfafn_pow2(RWIDTH-i);j=j+1) begin
			if (one_array[2*j])
				index_array[j] = index_array[2*j];
			else 
				index_array[j] = index_array[2*j+1];
			one_array[j] = one_array[2*j] || one_array[2*j+1];
		end
	result = one_array[0] ? index_array[0] : {WIDTH{1'b0}};
end

endmodule

//module dfafn_prio_search_linear
//#(parameter WIDTH=2, parameter DIR="SEARCH_LEFT")
//(
//	input  [WIDTH-1:0] value,
//	input  [WIDTH-1:0] prio_index,
//	output [WIDTH-1:0] result
//);
//
//integer i;
//reg [WIDTH-1:0] rot, result;
//reg done;
//
//always @* begin
//	rot = prio_index;
//	done = 1'b0;
//	result = {WIDTH{1'b0}};
//        for (i=0;i<WIDTH;i=i+1) begin
//                if (!done && (|(rot & value)) ) begin
//			done = 1'b1;
//			result = rot;
//		end
//		if (DIR=="SEARCH_LEFT") rot = {rot[WIDTH-2:0], rot[WIDTH-1]};
//		else rot = {rot[0], rot[WIDTH-1:1]};
//	end
//end
//
//endmodule
//
